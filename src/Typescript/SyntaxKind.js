"use strict"

const ts = require('typescript')

exports.unknown = ts.SyntaxKind.Unknown;
exports.endOfFileToken = ts.SyntaxKind.EndOfFileToken;
exports.singleLineCommentTrivia = ts.SyntaxKind.SingleLineCommentTrivia;
exports.multiLineCommentTrivia = ts.SyntaxKind.MultiLineCommentTrivia;
exports.newLineTrivia = ts.SyntaxKind.NewLineTrivia;
exports.whitespaceTrivia = ts.SyntaxKind.WhitespaceTrivia;
exports.shebangTrivia = ts.SyntaxKind.ShebangTrivia;
exports.conflictMarkerTrivia = ts.SyntaxKind.ConflictMarkerTrivia;
exports.numericLiteral = ts.SyntaxKind.NumericLiteral;
exports.bigIntLiteral = ts.SyntaxKind.BigIntLiteral;
exports.stringLiteral = ts.SyntaxKind.StringLiteral ;
exports.jsxText = ts.SyntaxKind.JsxText ;
exports.jsxTextAllWhiteSpaces = ts.SyntaxKind.JsxTextAllWhiteSpaces ;
exports.regularExpressionLiteral = ts.SyntaxKind.RegularExpressionLiteral ;
exports.noSubstitutionTemplateLiteral = ts.SyntaxKind.NoSubstitutionTemplateLiteral ;
exports.templateHead = ts.SyntaxKind.TemplateHead ;
exports.templateMiddle = ts.SyntaxKind.TemplateMiddle ;
exports.templateTail = ts.SyntaxKind.TemplateTail ;
exports.openBraceToken = ts.SyntaxKind.OpenBraceToken ;
exports.closeBraceToken = ts.SyntaxKind.CloseBraceToken ;
exports.openParenToken = ts.SyntaxKind.OpenParenToken ;
exports.closeParenToken = ts.SyntaxKind.CloseParenToken ;
exports.openBracketToken = ts.SyntaxKind.OpenBracketToken ;
exports.closeBracketToken = ts.SyntaxKind.CloseBracketToken ;
exports.dotToken = ts.SyntaxKind.DotToken ;
exports.dotDotDotToken = ts.SyntaxKind.DotDotDotToken ;
exports.semicolonToken = ts.SyntaxKind.SemicolonToken ;
exports.commaToken = ts.SyntaxKind.CommaToken ;
exports.questionDotToken = ts.SyntaxKind.QuestionDotToken ;
exports.lessThanToken = ts.SyntaxKind.LessThanToken ;
exports.lessThanSlashToken = ts.SyntaxKind.LessThanSlashToken ;
exports.greaterThanToken = ts.SyntaxKind.GreaterThanToken ;
exports.lessThanEqualsToken = ts.SyntaxKind.LessThanEqualsToken ;
exports.greaterThanEqualsToken = ts.SyntaxKind.GreaterThanEqualsToken ;
exports.equalsEqualsToken = ts.SyntaxKind.EqualsEqualsToken ;
exports.exclamationEqualsToken = ts.SyntaxKind.ExclamationEqualsToken ;
exports.equalsEqualsEqualsToken = ts.SyntaxKind.EqualsEqualsEqualsToken ;
exports.exclamationEqualsEqualsToken = ts.SyntaxKind.ExclamationEqualsEqualsToken ;
exports.equalsGreaterThanToken = ts.SyntaxKind.EqualsGreaterThanToken ;
exports.plusToken = ts.SyntaxKind.PlusToken ;
exports.minusToken = ts.SyntaxKind.MinusToken ;
exports.asteriskToken = ts.SyntaxKind.AsteriskToken ;
exports.asteriskAsteriskToken = ts.SyntaxKind.AsteriskAsteriskToken ;
exports.slashToken = ts.SyntaxKind.SlashToken ;
exports.percentToken = ts.SyntaxKind.PercentToken ;
exports.plusPlusToken = ts.SyntaxKind.PlusPlusToken ;
exports.minusMinusToken = ts.SyntaxKind.MinusMinusToken ;
exports.lessThanLessThanToken = ts.SyntaxKind.LessThanLessThanToken ;
exports.greaterThanGreaterThanToken = ts.SyntaxKind.GreaterThanGreaterThanToken ;
exports.greaterThanGreaterThanGreaterThanToken = ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken ;
exports.ampersandToken = ts.SyntaxKind.AmpersandToken ;
exports.barToken = ts.SyntaxKind.BarToken ;
exports.caretToken = ts.SyntaxKind.CaretToken ;
exports.exclamationToken = ts.SyntaxKind.ExclamationToken ;
exports.tildeToken = ts.SyntaxKind.TildeToken ;
exports.ampersandAmpersandToken = ts.SyntaxKind.AmpersandAmpersandToken ;
exports.barBarToken = ts.SyntaxKind.BarBarToken ;
exports.questionToken = ts.SyntaxKind.QuestionToken ;
exports.colonToken = ts.SyntaxKind.ColonToken ;
exports.atToken = ts.SyntaxKind.AtToken ;
exports.questionQuestionToken = ts.SyntaxKind.QuestionQuestionToken ;
/** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
exports.backtickToken = ts.SyntaxKind.BacktickToken ;
/** Only the JSDoc scanner produces HashToken. The normal scanner produces PrivateIdentifier. */
exports.hashToken = ts.SyntaxKind.HashToken ;
exports.equalsToken = ts.SyntaxKind.EqualsToken ;
exports.plusEqualsToken = ts.SyntaxKind.PlusEqualsToken ;
exports.minusEqualsToken = ts.SyntaxKind.MinusEqualsToken ;
exports.asteriskEqualsToken = ts.SyntaxKind.AsteriskEqualsToken ;
exports.asteriskAsteriskEqualsToken = ts.SyntaxKind.AsteriskAsteriskEqualsToken ;
exports.slashEqualsToken = ts.SyntaxKind.SlashEqualsToken ;
exports.percentEqualsToken = ts.SyntaxKind.PercentEqualsToken ;
exports.lessThanLessThanEqualsToken = ts.SyntaxKind.LessThanLessThanEqualsToken ;
exports.greaterThanGreaterThanEqualsToken = ts.SyntaxKind.GreaterThanGreaterThanEqualsToken ;
exports.greaterThanGreaterThanGreaterThanEqualsToken = ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken ;
exports.ampersandEqualsToken = ts.SyntaxKind.AmpersandEqualsToken ;
exports.barEqualsToken = ts.SyntaxKind.BarEqualsToken ;
exports.barBarEqualsToken = ts.SyntaxKind.BarBarEqualsToken ;
exports.ampersandAmpersandEqualsToken = ts.SyntaxKind.AmpersandAmpersandEqualsToken ;
exports.questionQuestionEqualsToken = ts.SyntaxKind.QuestionQuestionEqualsToken ;
exports.caretEqualsToken = ts.SyntaxKind.CaretEqualsToken ;
exports.identifier = ts.SyntaxKind.Identifier ;
exports.privateIdentifier = ts.SyntaxKind.PrivateIdentifier ;
exports.breakKeyword = ts.SyntaxKind.BreakKeyword ;
exports.caseKeyword = ts.SyntaxKind.CaseKeyword ;
exports.catchKeyword = ts.SyntaxKind.CatchKeyword ;
exports.classKeyword = ts.SyntaxKind.ClassKeyword ;
exports.constKeyword = ts.SyntaxKind.ConstKeyword ;
exports.continueKeyword = ts.SyntaxKind.ContinueKeyword ;
exports.debuggerKeyword = ts.SyntaxKind.DebuggerKeyword ;
exports.defaultKeyword = ts.SyntaxKind.DefaultKeyword ;
exports.deleteKeyword = ts.SyntaxKind.DeleteKeyword ;
exports.doKeyword = ts.SyntaxKind.DoKeyword ;
exports.elseKeyword = ts.SyntaxKind.ElseKeyword ;
exports.enumKeyword = ts.SyntaxKind.EnumKeyword ;
exports.exportKeyword = ts.SyntaxKind.ExportKeyword ;
exports.extendsKeyword = ts.SyntaxKind.ExtendsKeyword ;
exports.falseKeyword = ts.SyntaxKind.FalseKeyword ;
exports.finallyKeyword = ts.SyntaxKind.FinallyKeyword ;
exports.forKeyword = ts.SyntaxKind.ForKeyword ;
exports.functionKeyword = ts.SyntaxKind.FunctionKeyword ;
exports.ifKeyword = ts.SyntaxKind.IfKeyword ;
exports.importKeyword = ts.SyntaxKind.ImportKeyword;
exports.inKeyword = ts.SyntaxKind.InKeyword;
exports.instanceOfKeyword = ts.SyntaxKind.InstanceOfKeyword;
exports.newKeyword = ts.SyntaxKind.NewKeyword;
exports.nullKeyword = ts.SyntaxKind.NullKeyword;
exports.returnKeyword = ts.SyntaxKind.ReturnKeyword;
exports.superKeyword = ts.SyntaxKind.SuperKeyword;
exports.switchKeyword = ts.SyntaxKind.SwitchKeyword;
exports.thisKeyword = ts.SyntaxKind.ThisKeyword;
exports.throwKeyword = ts.SyntaxKind.ThrowKeyword;
exports.trueKeyword = ts.SyntaxKind.TrueKeyword;
exports.tryKeyword = ts.SyntaxKind.TryKeyword;
exports.typeOfKeyword = ts.SyntaxKind.TypeOfKeyword;
exports.varKeyword = ts.SyntaxKind.VarKeyword;
exports.voidKeyword = ts.SyntaxKind.VoidKeyword;
exports.whileKeyword = ts.SyntaxKind.WhileKeyword;
exports.withKeyword = ts.SyntaxKind.WithKeyword;
exports.implementsKeyword = ts.SyntaxKind.ImplementsKeyword;
exports.interfaceKeyword = ts.SyntaxKind.InterfaceKeyword;
exports.letKeyword = ts.SyntaxKind.LetKeyword;
exports.packageKeyword = ts.SyntaxKind.PackageKeyword;
exports.privateKeyword = ts.SyntaxKind.PrivateKeyword;
exports.protectedKeyword = ts.SyntaxKind.ProtectedKeyword;
exports.publicKeyword = ts.SyntaxKind.PublicKeyword;
exports.staticKeyword = ts.SyntaxKind.StaticKeyword;
exports.yieldKeyword = ts.SyntaxKind.YieldKeyword;
exports.abstractKeyword = ts.SyntaxKind.AbstractKeyword;
exports.asKeyword = ts.SyntaxKind.AsKeyword;
exports.assertsKeyword = ts.SyntaxKind.AssertsKeyword;
exports.anyKeyword = ts.SyntaxKind.AnyKeyword;
exports.asyncKeyword = ts.SyntaxKind.AsyncKeyword;
exports.awaitKeyword = ts.SyntaxKind.AwaitKeyword;
exports.booleanKeyword = ts.SyntaxKind.BooleanKeyword;
exports.constructorKeyword = ts.SyntaxKind.ConstructorKeyword;
exports.declareKeyword = ts.SyntaxKind.DeclareKeyword;
exports.getKeyword = ts.SyntaxKind.GetKeyword;
exports.inferKeyword = ts.SyntaxKind.InferKeyword;
exports.intrinsicKeyword = ts.SyntaxKind.IntrinsicKeyword;
exports.isKeyword = ts.SyntaxKind.IsKeyword;
exports.keyOfKeyword = ts.SyntaxKind.KeyOfKeyword;
exports.moduleKeyword = ts.SyntaxKind.ModuleKeyword;
exports.namespaceKeyword = ts.SyntaxKind.NamespaceKeyword;
exports.neverKeyword = ts.SyntaxKind.NeverKeyword;
exports.readonlyKeyword = ts.SyntaxKind.ReadonlyKeyword;
exports.requireKeyword = ts.SyntaxKind.RequireKeyword;
exports.numberKeyword = ts.SyntaxKind.NumberKeyword;
exports.objectKeyword = ts.SyntaxKind.ObjectKeyword;
exports.setKeyword = ts.SyntaxKind.SetKeyword;
exports.stringKeyword = ts.SyntaxKind.StringKeyword;
exports.symbolKeyword = ts.SyntaxKind.SymbolKeyword;
exports.typeKeyword = ts.SyntaxKind.TypeKeyword;
exports.undefinedKeyword = ts.SyntaxKind.UndefinedKeyword;
exports.uniqueKeyword = ts.SyntaxKind.UniqueKeyword;
exports.unknownKeyword = ts.SyntaxKind.UnknownKeyword;
exports.fromKeyword = ts.SyntaxKind.FromKeyword;
exports.globalKeyword = ts.SyntaxKind.GlobalKeyword;
exports.bigIntKeyword = ts.SyntaxKind.BigIntKeyword;
exports.overrideKeyword = ts.SyntaxKind.OverrideKeyword;
exports.ofKeyword = ts.SyntaxKind.OfKeyword;
exports.qualifiedName = ts.SyntaxKind.QualifiedName;
exports.computedPropertyName = ts.SyntaxKind.ComputedPropertyName;
exports.typeParameter = ts.SyntaxKind.TypeParameter;
exports.parameter = ts.SyntaxKind.Parameter;
exports.decorator = ts.SyntaxKind.Decorator;
exports.propertySignature = ts.SyntaxKind.PropertySignature;
exports.propertyDeclaration = ts.SyntaxKind.PropertyDeclaration;
exports.methodSignature = ts.SyntaxKind.MethodSignature;
exports.methodDeclaration = ts.SyntaxKind.MethodDeclaration;
exports.classStaticBlockDeclaration = ts.SyntaxKind.ClassStaticBlockDeclaration;
exports.constructor = ts.SyntaxKind.Constructor;
exports.getAccessor = ts.SyntaxKind.GetAccessor;
exports.setAccessor = ts.SyntaxKind.SetAccessor;
exports.callSignature = ts.SyntaxKind.CallSignature;
exports.constructSignature = ts.SyntaxKind.ConstructSignature;
exports.indexSignature = ts.SyntaxKind.IndexSignature;
exports.typePredicate = ts.SyntaxKind.TypePredicate;
exports.typeReference = ts.SyntaxKind.TypeReference;
exports.functionType = ts.SyntaxKind.FunctionType;
exports.constructorType = ts.SyntaxKind.ConstructorType;
exports.typeQuery = ts.SyntaxKind.TypeQuery;
exports.typeLiteral = ts.SyntaxKind.TypeLiteral;
exports.arrayType = ts.SyntaxKind.ArrayType;
exports.tupleType = ts.SyntaxKind.TupleType;
exports.optionalType = ts.SyntaxKind.OptionalType;
exports.restType = ts.SyntaxKind.RestType;
exports.unionType = ts.SyntaxKind.UnionType;
exports.intersectionType = ts.SyntaxKind.IntersectionType;
exports.conditionalType = ts.SyntaxKind.ConditionalType;
exports.inferType = ts.SyntaxKind.InferType;
exports.parenthesizedType = ts.SyntaxKind.ParenthesizedType;
exports.thisType = ts.SyntaxKind.ThisType;
exports.typeOperator = ts.SyntaxKind.TypeOperator;
exports.indexedAccessType = ts.SyntaxKind.IndexedAccessType;
exports.mappedType = ts.SyntaxKind.MappedType;
exports.literalType = ts.SyntaxKind.LiteralType;
exports.namedTupleMember = ts.SyntaxKind.NamedTupleMember;
exports.templateLiteralType = ts.SyntaxKind.TemplateLiteralType;
exports.templateLiteralTypeSpan = ts.SyntaxKind.TemplateLiteralTypeSpan;
exports.importType = ts.SyntaxKind.ImportType;
exports.objectBindingPattern = ts.SyntaxKind.ObjectBindingPattern;
exports.arrayBindingPattern = ts.SyntaxKind.ArrayBindingPattern;
exports.bindingElement = ts.SyntaxKind.BindingElement;
exports.arrayLiteralExpression = ts.SyntaxKind.ArrayLiteralExpression;
exports.objectLiteralExpression = ts.SyntaxKind.ObjectLiteralExpression;
exports.propertyAccessExpression = ts.SyntaxKind.PropertyAccessExpression;
exports.elementAccessExpression = ts.SyntaxKind.ElementAccessExpression;
exports.callExpression = ts.SyntaxKind.CallExpression;
exports.newExpression = ts.SyntaxKind.NewExpression;
exports.taggedTemplateExpression = ts.SyntaxKind.TaggedTemplateExpression;
exports.typeAssertionExpression = ts.SyntaxKind.TypeAssertionExpression;
exports.parenthesizedExpression = ts.SyntaxKind.ParenthesizedExpression;
exports.functionExpression = ts.SyntaxKind.FunctionExpression;
exports.arrowFunction = ts.SyntaxKind.ArrowFunction;
exports.deleteExpression = ts.SyntaxKind.DeleteExpression;
exports.typeOfExpression = ts.SyntaxKind.TypeOfExpression;
exports.voidExpression = ts.SyntaxKind.VoidExpression;
exports.awaitExpression = ts.SyntaxKind.AwaitExpression;
exports.prefixUnaryExpression = ts.SyntaxKind.PrefixUnaryExpression;
exports.postfixUnaryExpression = ts.SyntaxKind.PostfixUnaryExpression;
exports.binaryExpression = ts.SyntaxKind.BinaryExpression;
exports.conditionalExpression = ts.SyntaxKind.ConditionalExpression;
exports.templateExpression = ts.SyntaxKind.TemplateExpression;
exports.yieldExpression = ts.SyntaxKind.YieldExpression;
exports.spreadElement = ts.SyntaxKind.SpreadElement;
exports.classExpression = ts.SyntaxKind.ClassExpression;
exports.omittedExpression = ts.SyntaxKind.OmittedExpression;
exports.expressionWithTypeArguments = ts.SyntaxKind.ExpressionWithTypeArguments;
exports.asExpression = ts.SyntaxKind.AsExpression;
exports.nonNullExpression = ts.SyntaxKind.NonNullExpression;
exports.metaProperty = ts.SyntaxKind.MetaProperty;
exports.syntheticExpression = ts.SyntaxKind.SyntheticExpression;
exports.templateSpan = ts.SyntaxKind.TemplateSpan;
exports.semicolonClassElement = ts.SyntaxKind.SemicolonClassElement;
exports.block = ts.SyntaxKind.Block;
exports.emptyStatement = ts.SyntaxKind.EmptyStatement;
exports.variableStatement = ts.SyntaxKind.VariableStatement;
exports.expressionStatement = ts.SyntaxKind.ExpressionStatement;
exports.ifStatement = ts.SyntaxKind.IfStatement;
exports.doStatement = ts.SyntaxKind.DoStatement;
exports.whileStatement = ts.SyntaxKind.WhileStatement;
exports.forStatement = ts.SyntaxKind.ForStatement;
exports.forInStatement = ts.SyntaxKind.ForInStatement;
exports.forOfStatement = ts.SyntaxKind.ForOfStatement;
exports.continueStatement = ts.SyntaxKind.ContinueStatement;
exports.breakStatement = ts.SyntaxKind.BreakStatement;
exports.returnStatement = ts.SyntaxKind.ReturnStatement;
exports.withStatement = ts.SyntaxKind.WithStatement;
exports.switchStatement = ts.SyntaxKind.SwitchStatement;
exports.labeledStatement = ts.SyntaxKind.LabeledStatement;
exports.throwStatement = ts.SyntaxKind.ThrowStatement;
exports.tryStatement = ts.SyntaxKind.TryStatement;
exports.debuggerStatement = ts.SyntaxKind.DebuggerStatement;
exports.variableDeclaration = ts.SyntaxKind.VariableDeclaration;
exports.variableDeclarationList = ts.SyntaxKind.VariableDeclarationList;
exports.functionDeclaration = ts.SyntaxKind.FunctionDeclaration;
exports.classDeclaration = ts.SyntaxKind.ClassDeclaration;
exports.interfaceDeclaration = ts.SyntaxKind.InterfaceDeclaration;
exports.typeAliasDeclaration = ts.SyntaxKind.TypeAliasDeclaration;
exports.enumDeclaration = ts.SyntaxKind.EnumDeclaration;
exports.moduleDeclaration = ts.SyntaxKind.ModuleDeclaration;
exports.moduleBlock = ts.SyntaxKind.ModuleBlock;
exports.caseBlock = ts.SyntaxKind.CaseBlock;
exports.namespaceExportDeclaration = ts.SyntaxKind.NamespaceExportDeclaration;
exports.importEqualsDeclaration = ts.SyntaxKind.ImportEqualsDeclaration;
exports.importDeclaration = ts.SyntaxKind.ImportDeclaration;
exports.importClause = ts.SyntaxKind.ImportClause;
exports.namespaceImport = ts.SyntaxKind.NamespaceImport;
exports.namedImports = ts.SyntaxKind.NamedImports;
exports.importSpecifier = ts.SyntaxKind.ImportSpecifier;
exports.exportAssignment = ts.SyntaxKind.ExportAssignment;
exports.exportDeclaration = ts.SyntaxKind.ExportDeclaration;
exports.namedExports = ts.SyntaxKind.NamedExports;
exports.namespaceExport = ts.SyntaxKind.NamespaceExport;
exports.exportSpecifier = ts.SyntaxKind.ExportSpecifier;
exports.missingDeclaration = ts.SyntaxKind.MissingDeclaration;
exports.externalModuleReference = ts.SyntaxKind.ExternalModuleReference;
exports.jsxElement = ts.SyntaxKind.JsxElement;
exports.jsxSelfClosingElement = ts.SyntaxKind.JsxSelfClosingElement;
exports.jsxOpeningElement = ts.SyntaxKind.JsxOpeningElement;
exports.jsxClosingElement = ts.SyntaxKind.JsxClosingElement;
exports.jsxFragment = ts.SyntaxKind.JsxFragment;
exports.jsxOpeningFragment = ts.SyntaxKind.JsxOpeningFragment;
exports.jsxClosingFragment = ts.SyntaxKind.JsxClosingFragment;
exports.jsxAttribute = ts.SyntaxKind.JsxAttribute;
exports.jsxAttributes = ts.SyntaxKind.JsxAttributes;
exports.jsxSpreadAttribute = ts.SyntaxKind.JsxSpreadAttribute;
exports.jsxExpression = ts.SyntaxKind.JsxExpression;
exports.caseClause = ts.SyntaxKind.CaseClause;
exports.defaultClause = ts.SyntaxKind.DefaultClause;
exports.heritageClause = ts.SyntaxKind.HeritageClause;
exports.catchClause = ts.SyntaxKind.CatchClause;
exports.propertyAssignment = ts.SyntaxKind.PropertyAssignment;
exports.shorthandPropertyAssignment = ts.SyntaxKind.ShorthandPropertyAssignment;
exports.spreadAssignment = ts.SyntaxKind.SpreadAssignment;
exports.enumMember = ts.SyntaxKind.EnumMember;
exports.unparsedPrologue = ts.SyntaxKind.UnparsedPrologue;
exports.unparsedPrepend = ts.SyntaxKind.UnparsedPrepend;
exports.unparsedText = ts.SyntaxKind.UnparsedText;
exports.unparsedInternalText = ts.SyntaxKind.UnparsedInternalText;
exports.unparsedSyntheticReference = ts.SyntaxKind.UnparsedSyntheticReference;
exports.sourceFile = ts.SyntaxKind.SourceFile;
exports.bundle = ts.SyntaxKind.Bundle;
exports.unparsedSource = ts.SyntaxKind.UnparsedSource;
exports.inputFiles = ts.SyntaxKind.InputFiles;
exports.jSDocTypeExpression = ts.SyntaxKind.JSDocTypeExpression;
exports.jSDocNameReference = ts.SyntaxKind.JSDocNameReference;
exports.jSDocMemberName = ts.SyntaxKind.JSDocMemberName;
exports.jSDocAllType = ts.SyntaxKind.JSDocAllType;
exports.jSDocUnknownType = ts.SyntaxKind.JSDocUnknownType;
exports.jSDocNullableType = ts.SyntaxKind.JSDocNullableType;
exports.jSDocNonNullableType = ts.SyntaxKind.JSDocNonNullableType;
exports.jSDocOptionalType = ts.SyntaxKind.JSDocOptionalType;
exports.jSDocFunctionType = ts.SyntaxKind.JSDocFunctionType;
exports.jSDocVariadicType = ts.SyntaxKind.JSDocVariadicType;
exports.jSDocNamepathType = ts.SyntaxKind.JSDocNamepathType;
exports.jSDocComment = ts.SyntaxKind.JSDocComment;
exports.jSDocText = ts.SyntaxKind.JSDocText;
exports.jSDocTypeLiteral = ts.SyntaxKind.JSDocTypeLiteral;
exports.jSDocSignature = ts.SyntaxKind.JSDocSignature;
exports.jSDocLink = ts.SyntaxKind.JSDocLink;
exports.jSDocLinkCode = ts.SyntaxKind.JSDocLinkCode;
exports.jSDocLinkPlain = ts.SyntaxKind.JSDocLinkPlain;
exports.jSDocTag = ts.SyntaxKind.JSDocTag;
exports.jSDocAugmentsTag = ts.SyntaxKind.JSDocAugmentsTag;
exports.jSDocImplementsTag = ts.SyntaxKind.JSDocImplementsTag;
exports.jSDocAuthorTag = ts.SyntaxKind.JSDocAuthorTag;
exports.jSDocDeprecatedTag = ts.SyntaxKind.JSDocDeprecatedTag;
exports.jSDocClassTag = ts.SyntaxKind.JSDocClassTag;
exports.jSDocPublicTag = ts.SyntaxKind.JSDocPublicTag;
exports.jSDocPrivateTag = ts.SyntaxKind.JSDocPrivateTag;
exports.jSDocProtectedTag = ts.SyntaxKind.JSDocProtectedTag;
exports.jSDocReadonlyTag = ts.SyntaxKind.JSDocReadonlyTag;
exports.jSDocOverrideTag = ts.SyntaxKind.JSDocOverrideTag;
exports.jSDocCallbackTag = ts.SyntaxKind.JSDocCallbackTag;
exports.jSDocEnumTag = ts.SyntaxKind.JSDocEnumTag;
exports.jSDocParameterTag = ts.SyntaxKind.JSDocParameterTag;
exports.jSDocReturnTag = ts.SyntaxKind.JSDocReturnTag;
exports.jSDocThisTag = ts.SyntaxKind.JSDocThisTag;
exports.jSDocTypeTag = ts.SyntaxKind.JSDocTypeTag;
exports.jSDocTemplateTag = ts.SyntaxKind.JSDocTemplateTag;
exports.jSDocTypedefTag = ts.SyntaxKind.JSDocTypedefTag;
exports.jSDocSeeTag = ts.SyntaxKind.JSDocSeeTag;
exports.jSDocPropertyTag = ts.SyntaxKind.JSDocPropertyTag;
exports.syntaxList = ts.SyntaxKind.SyntaxList;
exports.notEmittedStatement = ts.SyntaxKind.NotEmittedStatement;
exports.partiallyEmittedExpression = ts.SyntaxKind.PartiallyEmittedExpression;
exports.commaListExpression = ts.SyntaxKind.CommaListExpression;
exports.mergeDeclarationMarker = ts.SyntaxKind.MergeDeclarationMarker;
exports.endOfDeclarationMarker = ts.SyntaxKind.EndOfDeclarationMarker;
exports.syntheticReferenceExpression = ts.SyntaxKind.SyntheticReferenceExpression;
exports.count = ts.SyntaxKind.Count;
exports.firstAssignment = ts.SyntaxKind.FirstAssignment ;
exports.lastAssignment = ts.SyntaxKind.LastAssignment ;
exports.firstCompoundAssignment = ts.SyntaxKind.FirstCompoundAssignment ;
exports.lastCompoundAssignment = ts.SyntaxKind.LastCompoundAssignment ;
exports.firstReservedWord = ts.SyntaxKind.FirstReservedWord ;
exports.lastReservedWord = ts.SyntaxKind.LastReservedWord;
exports.firstKeyword = ts.SyntaxKind.FirstKeyword ;
exports.lastKeyword = ts.SyntaxKind.LastKeyword;
exports.firstFutureReservedWord = ts.SyntaxKind.FirstFutureReservedWord;
exports.lastFutureReservedWord = ts.SyntaxKind.LastFutureReservedWord;
exports.firstTypeNode = ts.SyntaxKind.FirstTypeNode;
exports.lastTypeNode = ts.SyntaxKind.LastTypeNode;
exports.firstPunctuation = ts.SyntaxKind.FirstPunctuation ;
exports.lastPunctuation = ts.SyntaxKind.LastPunctuation ;
exports.firstToken = ts.SyntaxKind.FirstToken;
exports.lastToken = ts.SyntaxKind.LastToken;
exports.firstTriviaToken = ts.SyntaxKind.FirstTriviaToken;
exports.lastTriviaToken = ts.SyntaxKind.LastTriviaToken;
exports.firstLiteralToken = ts.SyntaxKind.FirstLiteralToken;
exports.lastLiteralToken = ts.SyntaxKind.LastLiteralToken ;
exports.firstTemplateToken = ts.SyntaxKind.FirstTemplateToken ;
exports.lastTemplateToken = ts.SyntaxKind.LastTemplateToken ;
exports.firstBinaryOperator = ts.SyntaxKind.FirstBinaryOperator ;
exports.lastBinaryOperator = ts.SyntaxKind.LastBinaryOperator ;
exports.firstStatement = ts.SyntaxKind.FirstStatement;
exports.lastStatement = ts.SyntaxKind.LastStatement;
exports.firstNode = ts.SyntaxKind.FirstNode;
exports.firstJSDocNode = ts.SyntaxKind.FirstJSDocNode;
exports.lastJSDocNode = ts.SyntaxKind.LastJSDocNode;
exports.firstJSDocTagNode = ts.SyntaxKind.FirstJSDocTagNode;
exports.lastJSDocTagNode = ts.SyntaxKind.LastJSDocTagNode;